// ✅ TOP of the file (after plugins)
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

// ✅ Load secret.properties (top)
def secretPropsFile = rootProject.file("secret.properties")
def secretProps = new Properties()
if (secretPropsFile.exists()) {
    secretProps.load(new FileInputStream(secretPropsFile))
}

/**
 * React Native Configuration Block
 */
react {
    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.wisboxwayone"

    defaultConfig {
        applicationId "com.wisboxwayone"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 3
        versionName "2.0"

        // ✅ Add secrets here
        // buildConfigField "String", "MAPS_API_KEY", "\"${secretProps['MAPS_API_KEY']}\""
        manifestPlaceholders = [
            MAPS_API_KEY: "${secretProps['MAPS_API_KEY'] ?: ''}"
        ]
    }

    signingConfigs {
        // debug {
        //     storeFile file('debug.keystore')
        //     storePassword 'android'
        //     keyAlias 'androiddebugkey'
        //     keyPassword 'android'
        // }
        release {
            storeFile file('my-release-key.keystore')
            storePassword 'Wisbox'
            keyAlias 'my-key-alias'
            keyPassword 'Wisbox'
        }
    }

    buildTypes {
        // debug {
        //     signingConfig signingConfigs.debug
        // }
        release {
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
        // release {
        //     signingConfig signingConfigs.release
        //     shrinkResouces false
        //     minifyEnabled enableProguardInReleaseBuilds
        //     proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        // }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
    implementation platform('com.google.firebase:firebase-bom:33.16.0')
    implementation 'com.google.firebase:firebase-analytics'
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
